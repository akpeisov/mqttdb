package kz.home.mqttdb.config;

import org.eclipse.paho.client.mqttv3.IMqttClient;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

public class Mqtt {
    private static final Logger logger = LoggerFactory.getLogger(Mqtt.class);

    @Value("${mqtt.publisher}")
    private String publisher = "spring-server";
    // @Value("${mqtt.url}")
    // private String mqtturl = "777";
    @Value("${mqtt.user}")
    private String user = "mqtt";
    @Value("${mqtt.pass}")
    private String pass = "mqtt";

    // private static String MQTT_PUBLISHER_ID = "spring-server";
    // private static String MQTT_SERVER_ADDRES=  "tcp://192.168.4.7:1883";
    private static String MQTT_PUBLISHER_ID;
    private static String MQTT_SERVER_ADDRESS;
    private static String MQTT_USER;
    private static String MQTT_PASS;
    
    // @Value("${mqtt.publisher}")
    // public void setNameStatic(String name){
    //     Mqtt.MQTT_PUBLISHER_ID = name;
    // }
    
    @Value("${mqtt.url}")
    public void setUrl(String url){
        Mqtt.MQTT_SERVER_ADDRESS = url;
        logger.info("setter " + url);
    }
    
    private static IMqttClient instance;

    public static IMqttClient getInstance() {
        try {
            logger.info("Mqtt url1 " + MQTT_SERVER_ADDRESS);            
            if (instance == null) {
                instance = new MqttClient(MQTT_SERVER_ADDRESS, MQTT_PUBLISHER_ID);
            }

            MqttConnectOptions options = new MqttConnectOptions();
            options.setAutomaticReconnect(true);
            options.setCleanSession(true);
            options.setConnectionTimeout(10);
            options.setUserName(MQTT_USER);            
            options.setPassword(MQTT_PASS.toCharArray());
            
            if (!instance.isConnected()) {
                instance.connect(options);
            }
        } catch (MqttException e) {
            e.printStackTrace();
        }

        return instance;
    }

    private Mqtt() {

    }
}

